// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using RentEase.Data.Models;

namespace RentEase.Data.DBContext;

public partial class RentEaseContext : DbContext
{
    public RentEaseContext()
    {
    }

    public RentEaseContext(DbContextOptions<RentEaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountToken> AccountTokens { get; set; }

    public virtual DbSet<AccountVerification> AccountVerifications { get; set; }

    public virtual DbSet<Apt> Apts { get; set; }

    public virtual DbSet<AptCategory> AptCategories { get; set; }

    public virtual DbSet<AptImage> AptImages { get; set; }

    public virtual DbSet<AptStatus> AptStatuses { get; set; }

    public virtual DbSet<AptUtility> AptUtilities { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostCategory> PostCategory { get; set; }

    public virtual DbSet<PostRequire> PostRequires { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<OrderType> OrderTypes { get; set; }

    public virtual DbSet<Utility> Utilities { get; set; }
    public virtual DbSet<AccountLikedApt> AccountLikedApts { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder.UseSqlServer("Data Source=103.112.211.244,1433;Initial Catalog=RentEase;Persist Security Info=True;User ID=sa;Password=Itjustapassword1@;TrustServerCertificate=True;Encrypt=false").UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);


    // public static string GetConnectionString(string connectionStringName)
    // {
    //     var config = new ConfigurationBuilder()
    //         .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
    //         .AddJsonFile("appsettings.json")
    //         .Build();

    //     string connectionString = config.GetConnectionString(connectionStringName);
    //     return connectionString;
    // }

    // protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //=> optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);



    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-SSAEKEN0;Initial Catalog=RentEase;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__349DA5A62F5DEB04");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Email, "IX_Account_Email");

            entity.HasIndex(e => e.PhoneNumber, "IX_Account_PhoneNumber");

            entity.HasIndex(e => e.RoleId, "IX_Account_RoleId");

            entity.HasIndex(e => e.PhoneNumber, "UQ__Account__85FB4E38627969EB");

            entity.HasIndex(e => e.Email, "UQ__Account__A9D1053441F530BF");

            entity.Property(e => e.AccountId).HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.GenderId).HasMaxLength(10);
            entity.Property(e => e.IsVerify).HasDefaultValue(false);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(15);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Account_Role");
        });

        modelBuilder.Entity<AccountToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountT__3214EC074C2E87F3");

            entity.ToTable("AccountToken");

            entity.HasIndex(e => e.AccountId, "IX_AccountToken_AccountId");

            entity.Property(e => e.AccountId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.RefreshToken).IsRequired();

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTokens)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AccountToken_Account");
        });

        modelBuilder.Entity<AccountVerification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountV__3214EC07812979E0");

            entity.ToTable("AccountVerification");

            entity.Property(e => e.AccountId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.IsUsed).HasDefaultValue(false);
            entity.Property(e => e.VerificationCode)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Account).WithMany(p => p.AccountVerifications)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AccountVerification_Account");
        });

        modelBuilder.Entity<Apt>(entity =>
        {
            entity.HasKey(e => e.AptId).HasName("PK__Apt__8D24E77238D6C477");

            entity.ToTable("Apt");

            entity.HasIndex(e => e.AptCategoryId, "IX_Apt_AptCategory");

            entity.HasIndex(e => e.AptStatusId, "IX_Apt_AptStatus");

            entity.HasIndex(e => e.OwnerId, "IX_Apt_OwnerId");

            entity.Property(e => e.AptId).HasMaxLength(255);
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.AddressLink).HasMaxLength(500);
            entity.Property(e => e.Area).HasDefaultValue(0.0);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.OwnerId)
                .HasMaxLength(255);
            entity.Property(e => e.Rating).HasDefaultValue(0.0);
            entity.Property(e => e.Status).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.AptCategory).WithMany(p => p.Apts)
                .HasForeignKey(d => d.AptCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Apt_AptCategory");

            entity.HasOne(d => d.AptStatus).WithMany(p => p.Apts)
                .HasForeignKey(d => d.AptStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Apt_AptStatus");
        });

        modelBuilder.Entity<AptCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptCateg__3214EC07B602F106");

            entity.ToTable("AptCategory");

            entity.HasIndex(e => e.CategoryName, "UQ__AptCateg__8517B2E008B30AFE").IsUnique();

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<AptImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptImage__8D24E772761F5E0C");

            entity.ToTable("AptImage");

            entity.Property(e => e.AptId).HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Apt)
                  .WithMany(p => p.AptImages) 
                  .HasForeignKey(d => d.AptId)
                  .OnDelete(DeleteBehavior.Cascade)
                  .HasConstraintName("FK_AptImage_Apt");
        });

        modelBuilder.Entity<AptStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptStatu__3214EC0701430943");

            entity.ToTable("AptStatus");

            entity.HasIndex(e => e.StatusName, "UQ__AptStatu__05E7698A86EA1D6C").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<AptUtility>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptUtili__3214EC07540A0EA3");

            entity.ToTable("AptUtility");

            entity.HasIndex(e => e.AptId, "IX_AptUtility_AptId");

            entity.HasIndex(e => e.UtilityId, "IX_AptUtility_UtilityId");

            entity.HasIndex(e => new { e.AptId, e.UtilityId }, "UQ_AptUtility").IsUnique();

            entity.Property(e => e.AptId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Apt).WithMany(p => p.AptUtilities)
                .HasForeignKey(d => d.AptId)
                .HasConstraintName("FK_AptUtility_Apt");

            entity.HasOne(d => d.Utility).WithMany(p => p.AptUtilities)
                .HasForeignKey(d => d.UtilityId)
                .HasConstraintName("FK_AptUtility_Utility");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BCF74207269");

            entity.Property(e => e.OrderId).HasMaxLength(255);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.PaidAt).HasColumnType("datetime");
            entity.Property(e => e.SenderId)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Sender).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Sender");

            entity.HasOne(d => d.OrderType).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrderTypeId)
                .HasConstraintName("FK_Order_OrderType");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.PostId).HasName("PK__Post__AA1260182BDDB060");

            entity.ToTable("Post");

            entity.Property(e => e.PostId).HasMaxLength(255);
            entity.Property(e => e.AccountId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.AptId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Posts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CPost_Account");

            entity.HasOne(d => d.Apt).WithMany(p => p.Posts)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Post_Apt");
        });

        modelBuilder.Entity<PostRequire>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PostRequ__3214EC0721C7FA81");

            entity.ToTable("PostRequire");

            entity.Property(e => e.AccountId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.PostId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.PostRequires)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PostRequire_Account");

            entity.HasOne(d => d.Post).WithMany(p => p.PostRequires)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PostRequire_Post");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Review__3214EC071860634A");

            entity.ToTable("Review");

            entity.HasIndex(e => e.AccountId, "IX_Review_AccountId");

            entity.HasIndex(e => e.AptId, "IX_Review_AptId");

            entity.Property(e => e.AccountId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.AptId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Rating).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Review_Account");

            entity.HasOne(d => d.Apt).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Review_Apt");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC074195CB0F");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B616060E7C55B").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });


        modelBuilder.Entity<OrderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Ordert__3214EC07450B5CD3");

            entity.ToTable("OrderType");

            entity.HasIndex(e => e.TypeName, "UQ__Ordert__D4E7DFA8FCA6D65C").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Utility>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Utility__3214EC07BD26B4C7");

            entity.ToTable("Utility");

            entity.HasIndex(e => e.UtilityName, "UQ__Utility__E8B225D6E81AEADB").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UtilityName)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}