// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using RentEase.Data.Models;

namespace RentEase.Data.DBContext;

public partial class RentEaseContext : DbContext
{
    public RentEaseContext()
    {
    }

    public RentEaseContext(DbContextOptions<RentEaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountToken> AccountTokens { get; set; }

    public virtual DbSet<AccountVerification> AccountVerifications { get; set; }

    public virtual DbSet<Apt> Apts { get; set; }

    public virtual DbSet<AptCategory> AptCategories { get; set; }

    public virtual DbSet<AptImage> AptImages { get; set; }

    public virtual DbSet<AptStatus> AptStatuses { get; set; }

    public virtual DbSet<AptUtility> AptUtilities { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<CurrentResident> CurrentResidents { get; set; }

    public virtual DbSet<MaintenanceRequest> MaintenanceRequests { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<Utility> Utilities { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public virtual DbSet<WalletTransaction> WalletTransactions { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);


    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-SSAEKEN0;Initial Catalog=RentEase;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3214EC07A7C06C38");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Email, "IX_Account_Email");

            entity.HasIndex(e => e.PhoneNumber, "IX_Account_PhoneNumber");

            entity.HasIndex(e => e.RoleId, "IX_Account_RoleId");

            entity.HasIndex(e => e.PhoneNumber, "UQ__Account__85FB4E386BB80190").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Account__A9D1053407B958D1").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Account_Role");
        });

        modelBuilder.Entity<AccountToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountT__3214EC070ED8A680");

            entity.ToTable("AccountToken");

            entity.HasIndex(e => e.AccountId, "IX_AccountToken_AccountId");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.RefreshToken).IsRequired();

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTokens)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountToken_Account");
        });

        modelBuilder.Entity<AccountVerification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountV__3214EC07F79FD17B");

            entity.ToTable("AccountVerification");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.IsUsed).HasDefaultValue(false);
            entity.Property(e => e.VerificationCode)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Account).WithMany(p => p.AccountVerifications)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountVerification_Account");
        });

        modelBuilder.Entity<Apt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Apt__3214EC0799E20537");

            entity.ToTable("Apt");

            entity.HasIndex(e => e.CategoryId, "IX_Apt_AptCategory");

            entity.HasIndex(e => e.StatusId, "IX_Apt_AptStatus");

            entity.HasIndex(e => e.OwnerId, "IX_Apt_OwnerId");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.AddressLink).HasMaxLength(500);
            entity.Property(e => e.AptCode)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Area).HasDefaultValue(0.0);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Rating).HasDefaultValue(0.0);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.Apts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Apt_AptCategory");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Apts)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Apt_AptStatus");
        });

        modelBuilder.Entity<AptCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptCateg__3214EC071308A9B9");

            entity.ToTable("AptCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<AptImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptImage__3214EC07C7101E9F");

            entity.ToTable("AptImage");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.ImageUrl1).HasColumnName("ImageURL1");
            entity.Property(e => e.ImageUrl2).HasColumnName("ImageURL2");
            entity.Property(e => e.ImageUrl3).HasColumnName("ImageURL3");
            entity.Property(e => e.ImageUrl4).HasColumnName("ImageURL4");
            entity.Property(e => e.ImageUrl5).HasColumnName("ImageURL5");
            entity.Property(e => e.ImageUrl6).HasColumnName("ImageURL6");
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Apt).WithMany(p => p.AptImages)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AptImage_Apt");
        });

        modelBuilder.Entity<AptStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptStatu__3214EC07793BC0D7");

            entity.ToTable("AptStatus");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<AptUtility>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AptUtili__3214EC07C1A30303");

            entity.ToTable("AptUtility");

            entity.HasIndex(e => e.AptId, "IX_AptUtility_AptId");

            entity.HasIndex(e => e.UtilityId, "IX_AptUtility_UtilityId");

            entity.HasIndex(e => new { e.AptId, e.UtilityId }, "UQ_AptUtility").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Apt).WithMany(p => p.AptUtilities)
                .HasForeignKey(d => d.AptId)
                .HasConstraintName("FK_AptUtility_Apt");

            entity.HasOne(d => d.Utility).WithMany(p => p.AptUtilities)
                .HasForeignKey(d => d.UtilityId)
                .HasConstraintName("FK_AptUtility_Utility");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Contract__3214EC07F9D66402");

            entity.ToTable("Contract");

            entity.HasIndex(e => e.AgentId, "IX_Contract_AgentId");

            entity.HasIndex(e => e.ApproveStatusId, "IX_Contract_ApproveStatusId");

            entity.HasIndex(e => e.AptId, "IX_Contract_AptId");

            entity.HasIndex(e => e.ContractStatusId, "IX_Contract_ContractStatusId");

            entity.HasIndex(e => e.LesseeId, "IX_Contract_LesseeId");

            entity.HasIndex(e => e.LessorId, "IX_Contract_LessorId");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.FileUrl).HasColumnName("FileURL");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Agent).WithMany(p => p.ContractAgents)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_Contract_Agent");

            entity.HasOne(d => d.Apt).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Apt");

            entity.HasOne(d => d.Lessee).WithMany(p => p.ContractLessees)
                .HasForeignKey(d => d.LesseeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Lessee");

            entity.HasOne(d => d.Lessor).WithMany(p => p.ContractLessors)
                .HasForeignKey(d => d.LessorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Lessor");
        });

        modelBuilder.Entity<CurrentResident>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CurrentR__3214EC07FF4767B9");

            entity.ToTable("CurrentResident");

            entity.HasIndex(e => e.AccountId, "IX_CurrentResident_AccountId");

            entity.HasIndex(e => e.AptId, "IX_CurrentResident_AptId");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.MoveInDate).HasColumnType("datetime");
            entity.Property(e => e.MoveOutDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.CurrentResidents)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CurrentResident_Account");

            entity.HasOne(d => d.Apt).WithMany(p => p.CurrentResidents)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CurrentResident_Apt");
        });

        modelBuilder.Entity<MaintenanceRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Maintena__3214EC07CDAF9235");

            entity.ToTable("MaintenanceRequest");

            entity.HasIndex(e => e.AptId, "IX_MaintenanceRequest_AptId");

            entity.HasIndex(e => e.LesseeId, "IX_MaintenanceRequest_LesseeId");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Agent).WithMany(p => p.MaintenanceRequestAgents)
                .HasForeignKey(d => d.AgentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MaintenanceRequest_Agent");

            entity.HasOne(d => d.Apt).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MaintenanceRequest_Apt");

            entity.HasOne(d => d.Lessee).WithMany(p => p.MaintenanceRequestLessees)
                .HasForeignKey(d => d.LesseeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MaintenanceRequest_Lessee");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Review__3214EC07E13FB91C");

            entity.ToTable("Review");

            entity.HasIndex(e => e.AptId, "IX_Review_AptId");

            entity.HasIndex(e => e.ReviewerId, "IX_Review_ReviewerId");

            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Rating).HasDefaultValue(0.0);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Apt).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.AptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Review_Apt");

            entity.HasOne(d => d.Reviewer).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.ReviewerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Review_Reviewer");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC073B0B480A");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B616094AF70F7").IsUnique();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransactionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__3214EC07E15E3D29");

            entity.ToTable("TransactionType");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Utility>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Utility__3214EC07760491FF");

            entity.ToTable("Utility");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Wallet>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Wallet__349DA5A615ED24A0");

            entity.ToTable("Wallet");

            entity.HasIndex(e => e.AccountId, "IDX_Wallet_AccountId");

            entity.Property(e => e.AccountId).ValueGeneratedNever();
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithOne(p => p.Wallet)
                .HasForeignKey<Wallet>(d => d.AccountId)
                .HasConstraintName("FK_Wallet_Account");
        });

        modelBuilder.Entity<WalletTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WalletTr__3214EC0761861E39");

            entity.HasIndex(e => e.AccountId, "IDX_WalletTransactions_AccountId");

            entity.HasIndex(e => e.TransactionTypeId, "IDX_WalletTransactions_TransactionTypeId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);

            entity.HasOne(d => d.Account).WithMany(p => p.WalletTransactions)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_WalletTransactions_Wallet");

            entity.HasOne(d => d.TransactionType).WithMany(p => p.WalletTransactions)
                .HasForeignKey(d => d.TransactionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WalletTransactions_TransactionType");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}